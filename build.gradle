/*
 * This file was generated by the Gradle 'init' task.
 */
buildscript {
    ext {
        kotlinVersion = '1.2.71'
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.2.0")
        classpath("com.moowork.gradle:gradle-node-plugin:1.2.0")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.moowork.node'


group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'foodmenukotlin'
sourceCompatibility = '1.8'

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

dependencies {
    compile 'org.postgresql:postgresql:9.4.1211'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.0.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-security:2.0.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.0.RELEASE'
    compile 'io.jsonwebtoken:jjwt:0.9.0'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.4'
    compile 'org.flywaydb:flyway-core:5.0.7'
    compile "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    runtime 'mysql:mysql-connector-java:5.1.45'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.0.0.RELEASE'
    testCompile 'org.springframework.security:spring-security-test:5.0.3.RELEASE'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.5'
}


task cleanPublicFolder(type: Delete){
    description 'Clean files from public'
    delete "${project.projectDir}/src/main/resources/public/"
}


task copyDist(type: Copy){
    // dependsOn npm_run_dist
    description 'Copy Files from frontend to public'
    def publicDir = file("${project.projectDir}/src/main/resources/public/")
    publicDir.mkdirs()

    from  "${project.projectDir}/frontend/build/"
    into  "${project.projectDir}/src/main/resources/public/"
}


task generateNewVersionFile{
    delete "${project.projectDir}/src/main/resources/VERSION"
    def outputDir = file("${project.projectDir}/src/main/resources/")
    new File(outputDir, "VERSION").write("$project.version")
}



task compileFrontEnd{
    dependsOn copyDist
}

generateNewVersionFile.dependsOn cleanPublicFolder
compileFrontEnd.dependsOn cleanPublicFolder

processResources{
    dependsOn compileFrontEnd
}